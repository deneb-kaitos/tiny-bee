// automatically generated by the FlatBuffers compiler, do not modify
  import * as flatbuffers from "flatbuffers";
export class Message {
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessage(bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    payload(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startMessage(builder) {
        builder.startObject(1);
    }
    static addPayload(builder, payloadOffset) {
        builder.addFieldOffset(0, payloadOffset, 0);
    }
    static endMessage(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMessageBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMessageBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMessage(builder, payloadOffset) {
        Message.startMessage(builder);
        Message.addPayload(builder, payloadOffset);
        return Message.endMessage(builder);
    }
    constructor(){
        this.bb = null;
        this.bb_pos = 0;
    }
}
